# -*- coding: utf-8 -*-
#!/usr/bin/env python
# File Name: cpp_codegen.py
# Author: Stan.Lch
# Mail: fn.stanc@gmail.com
# Created Time: 2018/7/18 16:20:53

TAB_WIDTH = 4


def output_cpp_file_header(file_name):
    header = \
        '''/*
* @file: %s
* @brief: This file is generated by xlstool, please don't edit it.
*/

'''
    return header % file_name


def begin_namescpce(ns):
    return "namespace %s {\n" % ns


def end_namespace(ns):
    return "} // %s\n" % ns


def begin_class(name, indent):
    return ' ' * indent + "class %s {\n" % name


def end_class(name, indent):
    return ' ' * indent + "}; // %s\n" % name


def output_cs_file_tail():
    return "}\n}\n"


def include_sheet_data_strut(sheet_name):
    return "#include \"%s.pb.h\"\n" % sheet_name


def output_data_root(datablocks_name, indent):
    data_root = "{}{} data_root_;\n".format(' ' * indent, datablocks_name)
    return data_root


def output_member(short_type_name, indent):
    member = "{}std::map<int, const {} *> {}_items_;\n".format(
        ' ' * indent, short_type_name, short_type_name)
    return member


def output_getter_function(short_type_name, indent, output):
    body_space = ' ' * (indent + TAB_WIDTH)
    output.append(
        ' ' * indent + "const {} *Get{}(int id) {{\n".format(short_type_name, short_type_name))
    output.append(
        body_space + "auto iter = {}_items_.find(id);\n".format(short_type_name))
    output.append(
        body_space + "if(iter != {}_items_.end()) return iter->second;\n".format(short_type_name))
    output.append(body_space + "return nullptr;\n".format(short_type_name))
    output.append(' ' * indent + "}\n\n")


def output_init_function(all_sheet_metas, indent, output):
    output.append(' ' * indent + "bool Init(const std::string &bytes) {\n")
    body_indent = ' ' * (indent + TAB_WIDTH)
    output.append(
        body_indent + "if (!data_root_.ParseFromString(bytes)) return false;\n")

    for xls_file, sheet_metas in list(all_sheet_metas.items()):
        for sheet_meta in sheet_metas:
            short_type_name = sheet_meta.sheet_name
            lower_shot_type_name = short_type_name.lower()
            output.append(body_indent +
                          "for(int i = 0; i < data_root_.{}_items_size(); ++i) {{\n".format(lower_shot_type_name))
            output.append(body_indent + ' ' * TAB_WIDTH +
                          "const {} &item = data_root_.{}_items(i);\n".format(short_type_name, lower_shot_type_name))
            output.append(body_indent + ' ' * TAB_WIDTH +
                          "{}_items_[item.id()] = &item;\n".format(short_type_name))
            output.append(body_indent + "}\n")

    output.append(body_indent + "return true;\n")
    output.append(' ' * indent + "}\n")


def gen_code(package_name, loader_name, datablocks_name, all_sheet_metas, output_path):
    import os
    if not os.path.exists(output_path):
        os.makedirs(output_path)

    include_lines = []
    include_lines.append("#include <map>\n")
    include_lines.append("#include <string>\n")
    include_lines.append(include_sheet_data_strut(datablocks_name))

    member_lines = []

    member_lines.append("private:\n")
    member_lines.append(output_data_root(datablocks_name, TAB_WIDTH))

    member_functions = []
    member_functions.append("public:\n")

    for xls_file, sheet_metas in list(all_sheet_metas.items()):
        for sheet_meta in sheet_metas:
            sheet_name = sheet_meta.sheet_name
            include_lines.append(include_sheet_data_strut(sheet_name))
            member_lines.append(output_member(sheet_name, TAB_WIDTH))
            output_getter_function(sheet_name, TAB_WIDTH, member_functions)

    output_init_function(all_sheet_metas, TAB_WIDTH, member_functions)

    include_lines.append("\n")
    member_lines.append("\n")

    file_name = loader_name + ".h"
    file_path = os.path.join(output_path, file_name)
    with open(file_path, "w") as f:
        f.write(output_cpp_file_header(file_name))
        f.writelines(include_lines)

        f.write(begin_namescpce(package_name))
        f.write(begin_class(loader_name, 0))

        f.writelines(member_lines)
        f.writelines(member_functions)

        f.write(end_class(loader_name, 0))
        f.write(end_namespace(package_name))
