# -*- coding: utf-8 -*-
# !/usr/bin/env python
# File Name: unity_csharp_codegen.py
# Author: Stan.Lch
# Mail: fn.stanc@gmail.com
# Created Time: 2018/7/15 15:13:33


TAB_WIDTH = 4


def output_cs_file_header(package_name, loader_name, file_name):
    header = \
'''/*
* @file: %s
* @brief: This file is generated by xlstool, please don't edit it.
*/

using System;
using System.Collections.Generic;

namespace %s {
public static class %s {

'''
    return header % (file_name, package_name, loader_name)


def output_cs_file_tail():
    return "}\n}\n"


def output_loader_class_member(type_name, indent, output):
    member = ' ' * indent + "private static readonly Dictionary<int, {}> {}_items_ = new Dictionary<int, {}>();\n"
    output.append(member.format(type_name, type_name, type_name))


def output_member_init_code_snippet(type_name, indent, output):
    space = ' ' * indent
    body_space = ' ' * (indent + TAB_WIDTH)
    output.append("{}for (int i = 0; i < dataBlocks.{}_items.Count; ++i) {{\n".format(space, type_name))
    output.append("{}var item = dataBlocks.{}_items[i];\n".format(body_space , type_name))
    output.append("{}{}_items_[item.id] = item;\n".format(body_space, type_name))
    output.append(space +"}\n")


def begin_init_function(package_name, datablocks_name, indent):
    space = ' ' * indent
    body_space = ' ' * (indent + TAB_WIDTH)

    content = space + "public static bool Init(byte[] bytes) {{\n"
    content += "#region Init\n"
    content += body_space + "var dataBlocks = ProtoBuf.Serializer.Deserialize<{}.{}>(new System.IO.MemoryStream(bytes));\n"
    content += body_space + "if (dataBlocks == null) return false;\n"

    return content.format(package_name, datablocks_name)


def end_init_fundtion(indent):
    space = ' ' * indent
    body_space = ' ' * (indent + TAB_WIDTH)
    content = body_space + "return true;\n"
    content += "#endregion\n"
    content += space + "}\n\n"
    return content


def output_item_getter_function(type_name, indent, output):
    body_space = ' ' * (indent + TAB_WIDTH)
    output.append(' ' * indent + "public static {} Get{}(int id) {{\n".format(type_name, type_name))
    output.append(body_space + "{} item;\n".format(type_name))
    output.append(body_space + "{}_items_.TryGetValue(id, out item);\n".format(type_name))
    output.append(body_space + "return item;\n".format(type_name))
    output.append(' ' * indent + "}\n\n")


def gen_code(package_name, loader_name, datablocks_name, all_sheet_metas, output_path):
    import os
    if not os.path.exists(output_path):
        os.makedirs(output_path)

    member_lines = []
    member_init_codes = []
    getter_functions = []
    member_lines.append("#region DataBlocks\n")
    for xls_file, sheet_metas in list(all_sheet_metas.items()):
        for sheet_meta in sheet_metas:
            sheet_name = sheet_meta.sheet_name

            # output member for data loader class
            output_loader_class_member(sheet_name, 4, member_lines)

            # output member initialization codes
            output_member_init_code_snippet(sheet_name, 8, member_init_codes)

            output_item_getter_function(sheet_name, 4, getter_functions)
    member_lines.append('#endregion\n\n')

    import os
    file_name = loader_name + ".cs"
    file_path = os.path.join(output_path, file_name)
    with open(file_path, "w") as f:
        f.write(output_cs_file_header(package_name, loader_name, file_name))
        f.writelines(member_lines)

        f.write(begin_init_function(package_name, datablocks_name, 4))
        f.writelines(member_init_codes)
        f.write(end_init_fundtion(4))

        f.writelines(getter_functions)

        f.write(output_cs_file_tail())
