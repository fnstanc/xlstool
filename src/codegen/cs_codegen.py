#!/usr/bin/env python
# -*- coding: utf-8 -*-
# File  : cs_codegen.py
# Author: Lch <fn.stanc@gmail.com>
# Date  : 2019/01/08 16:12:00

TAB_WIDTH = 4


cs_file_template = '''/*
* @file: ${filename}
* @brief: This file is generated by xlstool, please don't edit it.
*/

using System;
using System.Collections.Generic;

namespace ${package_name} {
    public static class ${loader_name} {
#region DataBlocks
        private static ${datablocks_name} _dataBlocks;
        ${members}
#endregion

        public static bool Init(byte[] bytes) {
            _dataBlocks = ${datablocks_name}.Parser.ParseFrom(bytes);
            if (_dataBlocks == null) return false;
            ${initialization_blocks}
            return true;
        }

        ${getter_functions}

    }  // ${loader_name}
}  // ${package_name}
'''


initialization_block_template = '''for (int i = 0; i < _dataBlocks.${type}Items.Count; ++i) {
                var item = _dataBlocks.${type}Items[i];
                _${type}Items[item.Id] = item;
            }'''


member_template = '''private static readonly Dictionary<int, ${type}> _${type}Items = new Dictionary<int, ${type}>();'''


getter_function_template = '''public static int ${type}Count() {
            return _dataBlocks.${type}Items.Count;
        }

        public static ${type} ${type}Item(int index) {
            return _dataBlocks.${type}Items[index];
        }

        public static ${type} ${type}Find(int id) {
            ${type} item;
            _${type}Items.TryGetValue(id, out item);
            return item;
        }
'''


def gen_code(package_name, loader_name,
             datablocks_name, all_sheet_metas, output_path):
    import os
    if not os.path.exists(output_path):
        os.makedirs(output_path)

    filename = loader_name + ".cs"
    file_content = cs_file_template.replace("${filename}", filename)
    file_content = file_content.replace("${package_name}", package_name)
    file_content = file_content.replace("${loader_name}", loader_name)
    file_content = file_content.replace("${datablocks_name}", datablocks_name)

    member_lines = []
    initialization_lines = []
    getter_lines = []
    for xls_file, sheet_metas in list(all_sheet_metas.items()):
        for sheet_meta in sheet_metas:
            sheet_name = sheet_meta.sheet_name
            member_lines.append(member_template.replace("${type}", sheet_name))
            initialization_lines.append(
                initialization_block_template.replace("${type}", sheet_name))
            getter_lines.append(
                getter_function_template.replace("${type}", sheet_name))

    content = "\n        ".join(member_lines)
    file_content = file_content.replace("${members}", content)

    content = "\n            ".join(initialization_lines)
    file_content = file_content.replace("${initialization_blocks}", content)

    content = "\n        ".join(getter_lines)
    file_content = file_content.replace("${getter_functions}", content)

    filepath = os.path.join(output_path, filename)
    with open(filepath, "w") as f:
        f.write(file_content)
