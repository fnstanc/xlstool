// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Skill.proto

#include "Skill.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace MyGame {
class SkillDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Skill>
      _instance;
} _Skill_default_instance_;
}  // namespace MyGame
namespace protobuf_Skill_2eproto {
static void InitDefaultsSkill() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::MyGame::_Skill_default_instance_;
    new (ptr) ::MyGame::Skill();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MyGame::Skill::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Skill =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSkill}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Skill.base);
}

::google::protobuf::Metadata file_level_metadata[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MyGame::Skill, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MyGame::Skill, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MyGame::Skill, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MyGame::Skill, skillid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MyGame::Skill, skillicon_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MyGame::Skill, skillname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MyGame::Skill, skilllevel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MyGame::Skill, skilltype_),
  1,
  2,
  3,
  0,
  4,
  5,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, sizeof(::MyGame::Skill)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::MyGame::_Skill_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "Skill.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\013Skill.proto\022\006MyGame\"q\n\005Skill\022\n\n\002id\030\001 \001"
      "(\005\022\017\n\007skillID\030\002 \001(\005\022\021\n\tskillIcon\030\003 \001(\005\022\021"
      "\n\tskillName\030\004 \001(\t\022\022\n\nskillLevel\030\005 \001(\005\022\021\n"
      "\tskillType\030\006 \001(\005"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 136);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Skill.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_Skill_2eproto
namespace MyGame {

// ===================================================================

void Skill::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Skill::kIdFieldNumber;
const int Skill::kSkillIDFieldNumber;
const int Skill::kSkillIconFieldNumber;
const int Skill::kSkillNameFieldNumber;
const int Skill::kSkillLevelFieldNumber;
const int Skill::kSkillTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Skill::Skill()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_Skill_2eproto::scc_info_Skill.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:MyGame.Skill)
}
Skill::Skill(const Skill& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  skillname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_skillname()) {
    skillname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.skillname_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&skilltype_) -
    reinterpret_cast<char*>(&id_)) + sizeof(skilltype_));
  // @@protoc_insertion_point(copy_constructor:MyGame.Skill)
}

void Skill::SharedCtor() {
  skillname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&skilltype_) -
      reinterpret_cast<char*>(&id_)) + sizeof(skilltype_));
}

Skill::~Skill() {
  // @@protoc_insertion_point(destructor:MyGame.Skill)
  SharedDtor();
}

void Skill::SharedDtor() {
  skillname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Skill::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Skill::descriptor() {
  ::protobuf_Skill_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Skill_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Skill& Skill::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_Skill_2eproto::scc_info_Skill.base);
  return *internal_default_instance();
}


void Skill::Clear() {
// @@protoc_insertion_point(message_clear_start:MyGame.Skill)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    skillname_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 62u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&skilltype_) -
        reinterpret_cast<char*>(&id_)) + sizeof(skilltype_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Skill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MyGame.Skill)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 skillID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_skillid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skillid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 skillIcon = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_skillicon();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skillicon_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string skillName = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_skillname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->skillname().data(), static_cast<int>(this->skillname().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MyGame.Skill.skillName");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 skillLevel = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_skilllevel();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skilllevel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 skillType = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_skilltype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skilltype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MyGame.Skill)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MyGame.Skill)
  return false;
#undef DO_
}

void Skill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MyGame.Skill)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 skillID = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->skillid(), output);
  }

  // optional int32 skillIcon = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->skillicon(), output);
  }

  // optional string skillName = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->skillname().data(), static_cast<int>(this->skillname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MyGame.Skill.skillName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->skillname(), output);
  }

  // optional int32 skillLevel = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->skilllevel(), output);
  }

  // optional int32 skillType = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->skilltype(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MyGame.Skill)
}

::google::protobuf::uint8* Skill::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MyGame.Skill)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 skillID = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->skillid(), target);
  }

  // optional int32 skillIcon = 3;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->skillicon(), target);
  }

  // optional string skillName = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->skillname().data(), static_cast<int>(this->skillname().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MyGame.Skill.skillName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->skillname(), target);
  }

  // optional int32 skillLevel = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->skilllevel(), target);
  }

  // optional int32 skillType = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->skilltype(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MyGame.Skill)
  return target;
}

size_t Skill::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MyGame.Skill)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional string skillName = 4;
    if (has_skillname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->skillname());
    }

    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 skillID = 2;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skillid());
    }

    // optional int32 skillIcon = 3;
    if (has_skillicon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skillicon());
    }

    // optional int32 skillLevel = 5;
    if (has_skilllevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skilllevel());
    }

    // optional int32 skillType = 6;
    if (has_skilltype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skilltype());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Skill::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MyGame.Skill)
  GOOGLE_DCHECK_NE(&from, this);
  const Skill* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Skill>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MyGame.Skill)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MyGame.Skill)
    MergeFrom(*source);
  }
}

void Skill::MergeFrom(const Skill& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MyGame.Skill)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_skillname();
      skillname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.skillname_);
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      skillid_ = from.skillid_;
    }
    if (cached_has_bits & 0x00000008u) {
      skillicon_ = from.skillicon_;
    }
    if (cached_has_bits & 0x00000010u) {
      skilllevel_ = from.skilllevel_;
    }
    if (cached_has_bits & 0x00000020u) {
      skilltype_ = from.skilltype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Skill::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MyGame.Skill)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Skill::CopyFrom(const Skill& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MyGame.Skill)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Skill::IsInitialized() const {
  return true;
}

void Skill::Swap(Skill* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Skill::InternalSwap(Skill* other) {
  using std::swap;
  skillname_.Swap(&other->skillname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(skillid_, other->skillid_);
  swap(skillicon_, other->skillicon_);
  swap(skilllevel_, other->skilllevel_);
  swap(skilltype_, other->skilltype_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Skill::GetMetadata() const {
  protobuf_Skill_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Skill_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace MyGame
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MyGame::Skill* Arena::CreateMaybeMessage< ::MyGame::Skill >(Arena* arena) {
  return Arena::CreateInternal< ::MyGame::Skill >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
